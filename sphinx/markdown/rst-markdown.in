#! /bin/bash

# This script lets you convert manuals from the Sphinx documentation of the
# Pure project to Markdown format, using Pandoc. Some effort is made to keep
# at least the internal document links intact. Some Sphinx constructs are also
# recognized. This certainly isn't perfect, but the script does a reasonably
# good job at least for simple input files, and it gives you a quick way to
# obtain a Markdown document from the Pure manuals which can then be edited
# and formatted in various ways.

# The script lets you pick the Markdown dialect to use for the target document
# with the -t / --to option, which is simply passed to Pandoc. The default is
# markdown_mmd (MultiMarkdown), which seems to provide the best compatibility
# with 3rd party tools. YMMV, though, so you may want to experiment with
# different Markdown variants to find the one which gives you the best
# results.

# Known Bugs:

# - Cross-document links do not work. We generate inline links for these so
#   that you have a starting point to edit them if needed, but they all point
#   to local link targets, which obviously doesn't work if the link target
#   actually is in another document.

# - Inline Links to function and variable definitions should work in html and
#   pdf output generated with Pandoc, if there is Sphinx markup for these in
#   the document source.

# - Internal section links are currently rendered as Markdown reference links.
#   These often work in generated html and pdf as well, even though Pandoc
#   makes no attempt to retain the RST link targets. This is by virtue of
#   Pandoc's implicit_header_references extension. Case is significant for
#   these, however, so the reference [Foo bar] to a section "Foo bar" will
#   work, but [foo bar] won't. (Marked, a popular Markdown previewer for the
#   Mac, is a bit more lenient, though, and renders such links correctly.
#   ReText, on the other hand, won't recognize any of them.)

# - At present, the script only recognizes a small subset of the RST and
#   Sphinx cross-referencing syntax, so anything beyond simple documents
#   will most likely give bad results.

# Prerequisites:

# - Make sure that you have Pandoc and GNU awk (as `gawk`) installed. The
#   script probably needs a fairly recent Pandoc version (1.12.x should do).

# - To get proper syntax highlighting for Pure, you'll have to build your own
#   versions of the pandoc and highlighting-kate Haskell modules, so that the
#   latter includes the highlighting rules for Pure.

# (To do this, grab the latest sources from https://github.com/jgm/pandoc and
# https://github.com/jgm/highlighting-kate, drop the Kate syntax-highlighting
# for Pure from pure/etc/pure.xml into the highlighting-kate/xml folder, then
# rebuild highlighting-kate and pandoc. Detailed instructions can be found at
# http://bakerjd99.wordpress.com/2012/09/20/pandoc-based-j-syntax-highlighting/.)

prog=`basename "$0"`

usage() {
  echo "USAGE: $prog [options ...] [file ...]" >&2
  echo "-h, --help:    print this message and exit" >&2
  echo "-o, --output:  markdown output file" >&2
  echo "-t, --to:      markdown output format" >&2
  echo "-d, --date:    date to be used for |today|" >&2
  echo "-v, --version: version number to be used for @version@" >&2
}

infiles=/dev/stdin
outfile=/dev/stdout
date=`date "+%B %d, %Y"`
version="0.0"
format=markdown_mmd

# If we have a Makefile in the current directory, try to determine the version
# number from there.
if [ -r Makefile ]; then
  version=`sed -E -n -e 's/^version[[:space:]]*=[[:space:]]*([^[:space:]]+)[[:space:]]*$/\1/p' Makefile`
fi

# Parse options using getopt(1).
args=`getopt  -o ho:t:d:v: -l help,output:,to:,date:,version: -n "$prog" -- "$@"`
if [ $? != 0 ] ; then exit 1 ; fi
eval set -- "$args"

while true; do
  case "$1" in
    -h|--help) usage; exit 1 ;;
    -o|--output) outfile="$2"; shift 2 ;;
    -t|--to) format="$2"; shift 2 ;;
    -d|--date) date="$2"; shift 2 ;;
    -v|--version) version="$2"; shift 2 ;;
    --) shift; break ;;
  esac
done

infiles="$@"

gawk -f <(sed -e '/^# rst-pre[.]awk$/,/^# end rst-pre[.]awk$/!d' $0) version="$version" date="$date" "$@" | pandoc -f rst -t $format --reference-links --column 78 | gawk -f <(sed -e '/^# rst-post[.]awk$/,/^# end rst-post[.]awk$/!d' $0) - > $outfile

exit $?
