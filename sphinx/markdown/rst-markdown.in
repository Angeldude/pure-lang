#! /bin/bash

# NOTE: To make this script self-contained, it includes embedded awk
# scripts. Do not remove the marker comments at the beginning and end of the
# awk scripts, otherwise we won't be able to find and extract them from the
# script source!

# Prerequisites:

# Make sure that you have Pandoc and GNU awk (as `gawk`) installed. The script
# probably needs a fairly recent Pandoc version (1.12.3 has been tested). To
# install the script, simply run `make install` (the installation prefix
# defaults to `/usr/local`; you can set this with the `prefix`make variable).

# To get proper syntax highlighting for Pure, at present you have to build
# your own versions of the pandoc and highlighting-kate Haskell modules.
# To do this, grab the latest sources from https://github.com/jgm/pandoc and
# https://github.com/jgm/highlighting-kate, drop the Kate syntax-highlighting
# for Pure from pure/etc/pure.xml into the highlighting-kate/xml folder, then
# rebuild highlighting-kate and pandoc. Detailed instructions can be found at
# http://bakerjd99.wordpress.com/2012/09/20/pandoc-based-j-syntax-highlighting/.

# Usage:

# This script uses Pandoc to convert plain RST documents and (some) Sphinx
# elements to Markdown format (or any other output format supported by
# Pandoc). It was primarily written for converting the Pure documentation
# files, but might also work with other, similar RST-based documents. Some
# effort is made to keep at least the internal document links to RST section
# headers intact, as well as Sphinx markup for descriptions of program
# options, functions, variables, etc. For the rest of the conversion we rely
# on Pandoc. The script certainly isn't perfect, but it does a reasonably good
# job at least for simple input files, and it gives you a quick way to obtain
# a Markdown document from the Pure manuals which can then be edited and
# formatted in various ways.

# The output format is usually auto-detected if an output filename is
# specified with -o / --output, otherwise you can specify the desired target
# format with the -t / --to option. The script understands a number of other
# options which are mostly passed to pandoc, and the -O / --options option
# lets you pass any other options not directly supported by the script. There
# are also a number of special pre- and post-processing options which affect
# the generated output:

# -d / --date and -v / --version allow you to substitute values for the most
# commonly used meta variables (|today| and @version@) in RST source files.

# -H / --headers uses Markdown section headers rather than definition lists
# for Sphinx descriptions of options, functions, variables, etc., which
# potentially makes links to these items work in some output
# formats other than html. Please check the notes below for details.

# -n / --no-links strips all inline and reference links from the Markdown
# output, leaving just the link text in single quotes. This is useful when
# generating Pandoc output formats such as manpages (-tman) which don't
# support links and where the resulting output looks weird if they are
# included.

# -R / --raw includes raw sections from the RST source (`.. raw::`). Pandoc
# seems to unconditionally include these sections, which usually messes up the
# output, so rst-markdown will by default strip them from the RST source
# during pre-processing, so that Pandoc never sees them. But if you really
# want to have this material included in the output then this option will give
# you that.

# -T / --title-block scrapes a Pandoc-style title block from the RST source.
# The title block should be formatted as follows (please also check the Pandoc
# documentation for a description of the title block syntax):

# .. % Title
# .. % Author
# .. % Date

# This will be treated as a comment by RST processors. If the -T option is
# used, then any additional frontmatter (i.e., everything leading up to the
# title block) will be stripped from the RST source, so that the output
# document begins with the Pandoc title block. (Note that this means that the
# resulting document will be empty if there's no title block in the source at
# all, so beware!)

# Notes:

# - At present, the script only recognizes a subset of the RST and Sphinx
#   cross-referencing syntax, so anything beyond simple documents will most
#   likely give funky results or not work at all.

# - Internal section links are rendered as Markdown inline links by default.
#   If you prefer, you can force implicit reference links of the form [name][]
#   by specifying the -r / --reference-links option on the command line (this
#   option is simply passed to pandoc in the post-processing stage).

# - Other RST link targets (`.. _name:`) in the source document should also
#   work, and references to these will use implicit reference links in
#   Markdown. Note, however, that inline html will be used to create the
#   anchors for internal link targets, which may not work with Pandoc target
#   document types other than html.

# - Sphinx definitions for options, functions, variables, etc. are by default
#   rendered as Markdown definition lists. This works fairly well, but has the
#   downside that the corresponding link targets are coded using inline html,
#   which may not work with Pandoc target document types other than html. As a
#   remedy, you can also translate such descriptions to Markdown section
#   headers instead, by using the -H / --headers option. Definition lists
#   often look better in formatted documents, but using section headers has
#   the advantage that Pandoc supports special PHP Markdown-style syntax for
#   the section link targets. This syntax isn't widely supported by 3rd party
#   tools, but it works with a few of Pandoc's own writer backends, and so
#   might be useful in cases where the target document type doesn't support
#   inline html anchors.

# - Cross-references to sections and definition items in other documents do
#   *not* work at present. The only exception are document links
#   (:doc:`docname`) where the target document is known and so an external
#   link to the document's html file can be created. For other
#   cross-references we generate inline links so that you have a starting
#   point to edit them if needed, but they all point to local link targets
#   right now. This obviously doesn't work if the link target actually is in
#   another document, but the script has no way of knowing this. Maybe we'll
#   provide an indexing tool which will remedy this in the future.

prog=`basename "$0"`

usage() {
  echo "USAGE: $prog [options ...] [file ...]" >&2
  echo "Options marked [pandoc] are simply passed to pandoc." >&2
  echo "General options:" >&2
  echo "-h, --help:            print this message and exit" >&2
  echo "-O, --options:         pass any options to pandoc (cumulative)" >&2
  echo "Preprocessing options:" >&2
  echo "-d, --date:            date to be inserted for |today|" >&2
  echo "-v, --version:         version number to be inserted for @version@" >&2
  echo "-R, --raw:             include raw markup in document" >&2
  echo "-T, --title-block:     include Pandoc-style title block" >&2
  echo "Output options:" >&2
  echo "-H, --headers:         use section headers for definitions" >&2
  echo "-n, --no-links:        suppress all links (show link text only)" >&2
  echo "-o, --output:          [pandoc] name of pandoc output file" >&2
  echo "-r, --reference-links: [pandoc] use reference rather than inline links" >&2
  echo "-s, --standalone:      [pandoc] produce a standalone document" >&2
  echo "-S, --smart:           [pandoc] smart quotes, dashes etc." >&2
  echo "-t, --to:              [pandoc] pandoc output format" >&2
}

infiles=/dev/stdin
date=`date "+%B %d, %Y"`
version="0.0"
options=
headers=no
no_links=no
raw=no
title_block=no

# If we have a Makefile in the current directory, try to determine the version
# number from there.
if [ -r Makefile ]; then
  version=`sed -E -n -e 's/^version[[:space:]]*=[[:space:]]*([^[:space:]]+)[[:space:]]*$/\1/p' Makefile`
fi

# Parse options using getopt(1).
args=`getopt  -o hd:v:To:O:HnrRsSt: -l help,date:,version:,title-block,output:,options:,headers,no-links,reference-links,rawstandalone,smart,to: -n "$prog" -- "$@"`
if [ $? != 0 ] ; then exit 1 ; fi
eval set -- "$args"

while true; do
  case "$1" in
    -h|--help) usage; exit 1 ;;
    -d|--date) date="$2"; shift 2 ;;
    -v|--version) version="$2"; shift 2 ;;
    -T|--title-block) title_block=yes; shift ;;
    -o|--output) options="$options -o $2"; shift 2 ;;
    -O|--options) options="$options $2"; shift 2 ;;
    -H|--headers) headers=yes; shift ;;
    -n|--no-links) no_links=yes; shift ;;
    -r|--reference-links) options="$options --reference-links"; shift ;;
    -R|--raw) raw=yes; shift ;;
    -s|--standalone) options="$options -s"; shift ;;
    -S|--smart) options="$options -S"; shift ;;
    -t|--to) options="$options -t $2"; shift 2 ;;
    --) shift; break ;;
  esac
done

infiles="$@"

tmpdir=`mktemp -d /tmp/rst-markdown.XXXXXX`
tmpfile="$tmpdir/targets"
tmpout="$tmpdir/outfile.md"

rm -Rf "$tmpdir"
mkdir -p "$tmpdir"

# Note that these two commands *must* be executed in sequence, to give
# rst-pre.awk the opportunity to finish writing the index file with the RST
# link targets before rst-post.awk is run.
gawk -f <(sed -e '/^# rst-pre[.]awk$/,/^# end rst-pre[.]awk$/!d' $0) -v raw="$raw" -v version="$version" -v date="$date" -v title_block="$title_block" -v tmpfile="$tmpfile" "$@" > "$tmpout" && \
pandoc -f rst -t markdown --no-wrap "$tmpout" | gawk -f <(sed -e '/^# rst-post[.]awk$/,/^# end rst-post[.]awk$/!d' $0) -v headers="$headers" -v no_links="$no_links" -v tmpfile="$tmpfile" - | pandoc -f markdown --columns 78 $options

rc=$?
rm -Rf "$tmpdir"

exit $rc
