
===========
pure-pandoc
===========

Version @version@, |today|

Albert Gr√§f <aggraef@gmail.com>

.. pandoc title block for the manpage:
.. % pure-pandoc(1) | Version @version@

.. Note: This document is written in RST syntax, but you can easily convert
.. it to Markdown format using the pure-pandoc script itself! For
.. convenience, the Makefile offers a target for this, just run ``make
.. markdown``. Similarly, ``make html`` and ``make pdf`` will format the
.. manual as an html or pdf file, respectively.

Synopsis
========

pure-pandoc [*options* ...] [*files* ...]

Description
===========

This script acts as a frontend to Pandoc_ which allows you to convert plain
RST_ documents and some Sphinx_ elements to Markdown format (or any other
output format supported by Pandoc). Its primary purpose is to convert the
Sphinx-formatted Pure documentation files. It might also work with other
simple RST-based documents, but the recognition of the Sphinx elements is
currently tailored to Pure-related markup, so the script will surely need some
work if you want to use it for other Sphinx domains such as C/C++ and Python.

.. _Pandoc: http://johnmacfarlane.net/pandoc/
.. _RST: http://docutils.sourceforge.net
.. _Sphinx: http://sphinx-doc.org

The script goes to some lengths to keep the internal document links to RST
section headers intact, as well as RST link targets and Sphinx markup for
descriptions of program options, functions, variables, etc. For the rest of
the conversion we rely on Pandoc. The script certainly isn't perfect, but it
does a reasonably good job (usually much better than just pandoc on its own),
and it gives you a quick way to obtain usable Markdown documents from the Pure
manuals which can then be edited and formatted in various ways.

Working with Markdown and Pandoc offers many benefits. For most purposes,
Markdown markup is even gentler and less obtrusive than RST, so it is easier
to both write and read. Markdown has also very good tool support, including
preview tools and editors both on "big" computers and on mobile devices, which
render Markdown documents on the fly and show you the beautifully formatted
results without any further ado. Markdown is also readily supported on code
hosting sites such as Bitbucket and GitHub. And, last but not least, Pandoc
makes it very easy to convert Markdown to a plethora of other document
formats, if the need arises. So there are good reasons that Markdown has
become the prevalent format for plain text documents.

Markdown also has some drawbacks; most notably, it doesn't support
cross-referencing between documents in large collections very well. This is
also the main reason that the Pure project still relies on RST and Sphinx. The
Pure documentation consists of dozens of manuals which are created from
various sources, including "docstrings" scraped from a large collection of
Pure scripts. RST/Sphinx works very well for that, so Pure's documentation
format isn't likely to change anytime soon. But we'd still like to leverage
Markdown's advantages, by making it easy to convert the Pure manuals to
Markdown. This is what the pure-pandoc script is for.

Usage
=====

pure-pandoc is invoked as follows: pure-pandoc [*options* ...] [*files* ...].
But most of the time, that's just: pure-pandoc *in-file* -o *out-file*

Use ``pure-pandoc -h`` to get a brief summary of the available options.
Here's a typical invocation, which translates the RST source document
``pure.txt`` to a Markdown document ``pure.md``::

  pure-pandoc pure.txt -o pure.md

The input files must all be in RST format. If none are specified, input is
read from stdin. Output goes to stdout, unless an output filename is given
with :option:`-o` / :option:`--output`.

The output format is usually auto-detected by pandoc if an output filename is
specified with :option:`-o` / :option:`--output`, otherwise you can specify
the desired target format with the :option:`-t` / :option:`--to` option. The
script understands a number of other pandoc options which are simply passed
through, and the :option:`-O` / :option:`--options` option lets you pass any
other options not directly supported by the script. The script also offers a
number of special pre-, post-processing and formatting options which affect
the generated output. All available options are listed below.

Options
=======

General Options
---------------

.. option:: -h
.. option:: --help

   Print a short help message, including a brief summary of the available
   options.

.. option:: -v
.. option:: --verbose

   Print some progress information useful for debugging purposes.

Pandoc Options
--------------

The recognized pandoc options are listed below. They are simply passed
through. Please see the pandoc documentation for a closer description of
these.

.. option:: -o output-file
.. option:: --output output-file

   Set the name of the pandoc output file.

.. option:: -r
.. option:: --reference-links

   Use reference rather than inline links.

.. option:: -s
.. option:: --standalone

   Produce a standalone document.

.. option:: -S
.. option:: --smart

   Produce smart quotes, dashes, etc. in the output.

.. option:: -t output-format
.. option:: --to output-format

   Set the pandoc output format.

The following option can be used to pass any other pandoc option which isn't
directly supported by the script.

.. option:: -O pandoc-options
.. option:: --options pandoc-options

   Additional options to be passed to pandoc. This is cumulative, so each
   argument given with :option:`-O` is added to the pandoc options.

Special Options
---------------

These are the special pre-, post-processing and formatting options of the
pure-pandoc script which affect the generated output.

.. option:: -d
.. option:: --date
.. option:: -V
.. option:: --version

   These options allow you to substitute values for the most commonly used
   meta variables (:verb:`\|today\|`, :verb:`\|version\|` and
   :verb:`\@version\@`) in RST source files. By default, the current date is
   used, and the script also tries to detect the version number from the
   ``version`` variable in a Makefile in the current directory, if present.

.. option:: -C
.. option:: --callouts

   Use a somewhat fancier formatting for RST note blocks (``.. note::``),
   which makes the Markdown rendering look a bit more like in the
   Sphinx-formatted docs.

.. option:: -c[max-items]
.. option:: --collapse-items[=max-items]

   Collapse adjacent item headers in Sphinx markup for options, functions,
   variables, etc., if possible. This gives a denser format if there are
   multiple items for the same description text, but only works if the items
   are rendered as Markdown definition lists (which is the default, but can be
   disabled with the :option:`-H` / :option:`--headers` option, see below).
   This option takes an optional argument which, if specified, denotes the
   desired maximum number of items per header line.

.. option:: -D[/pattern/format/]
.. option:: --describe[=/pattern/format/]

   This lets you adjust the format of generic Sphinx description items
   (``.. describe::``). The optional argument takes the form of a regex
   replacement which is applied to the item text; the result should be valid
   Markdown text. The default format is ``/.*/`\0`/`` which formats the entire
   item text as literal (typewriter) text. Something like, e.g.,
   ``/(\w+(\s+\w+)*):\s+(.*)/\1: `\3`/`` might be used to format a description
   of the form ``some text: foo bar`` so that the text up to the colon is set
   in regular text font (you can use :option:`-D` / :option:`--describe`
   without argument to give this specific example a try). This option is not
   straightforward to use (it's much too easy to mess up the replacement and
   end up with invalid Markdown), but may be useful for scripted conversions
   if you're not content with the default formatting of these items.

.. option:: -H
.. option:: --headers

   Uses Markdown section headers rather than definition lists for Sphinx
   descriptions of options, functions, variables, etc., which potentially
   makes links to these items work in some output formats other than
   html. Please check the notes below for details.

.. option:: -i index-file
.. option:: --index index-file

   Creates an index file in order to make cross references between separate
   documents work (see `External Document Links`_ below for details). The
   argument denotes the name of the index file to be created or updated.

.. option:: -N template
.. option:: --name template

   Document name template for cross-document links. This must be a printf
   template with exactly one ``%s`` in it; the default is ``"%s.html"``.
   Please check `External Document Links`_  below for details.

.. option:: -n
.. option:: --no-links

   Strips all inline and reference links from the Markdown output, leaving
   just the link text in single quotes. This is useful when generating Pandoc
   output formats such as manpages (``-tman``) which don't support links and
   where the resulting output looks confusing if they are included.

.. option:: -R
.. option:: --raw

   Includes raw sections from the RST source (``.. raw::``). Pandoc seems to
   unconditionally include these sections, which usually messes up the output,
   so pure-pandoc will by default strip them from the RST source during
   pre-processing, so that Pandoc never sees them. But if you really want to
   have this material included in the output then this option will give you
   that.

.. option:: -T
.. option:: --title-block

   Scrapes a title block from the RST source. The title block should be
   formatted as follows (please check the Pandoc documentation for a
   description of the title block syntax)::

     .. % Title
     .. % Author
     .. % Date

   This will be treated as a comment by RST processors. If the :option:`-T`
   option is used, then any additional frontmatter (i.e., everything leading
   up to the title block) will be stripped from the RST source, so that the
   output document begins with the title block. (Note that this means that the
   resulting document will be empty if there's no title block in the source at
   all, so beware!)

   Instead of a Pandoc title block, the script also recognizes a block with
   YAML metadata beginning with three dashes. In fact, the "title block" can
   be any contiguous block of RST comment lines beginning with either ``.. %``
   or ``.. ---``. The title block will be copied verbatim, after removing the
   ``..`` prefixes (the :verb:`\|today\|`, :verb:`\|version\|` and
   :verb:`\@version\@` meta variables will be substituted, however).

Installation Requirements
=========================

To run this script, you need to have Pandoc and GNU awk (as ``gawk``)
installed. The script probably needs a fairly recent Pandoc version (1.12.3
has been tested). To install the script, simply run ``make install`` in the
source directory (the installation prefix defaults to ``/usr/local``; you can
set this with the ``prefix`` make variable).

To get proper syntax highlighting for Pure, at present you have to build your
own versions of the pandoc and highlighting-kate Haskell modules. To do this,
grab the latest sources from https://github.com/jgm, and drop the Kate
syntax-highlighting for Pure (available as etc/pure.xml in the Pure sources)
into the highlighting-kate/xml folder. Then rebuild and install
highlighting-kate and pandoc (in that order). This is described in more detail
(for the J language, but the steps are analogous) in John Baker's blog at
http://bakerjd99.wordpress.com/2012/09/20/pandoc-based-j-syntax-highlighting/.

Once the Pure highlighting is installed, you can set the default language for
code sections and the desired highlighting style with Pandoc's
``--indented-code-classes`` and ``--highlight-style`` options when creating
the target document. For instance::

  pure-pandoc pure.txt -o pure.md
  pandoc --indented-code-classes=pure --highlight-style=kate pure.md -o pure.html

Notes
=====

At present, the script only recognizes a subset of the RST and Sphinx
cross-referencing syntax, so arbitrary complex documents will most likely give
funky results or not work at all. The script has been tested on the entire
Pure documentation, however, and should give proper results there.

Pandoc produces its own Markdown flavour by default. This is usually what you
want if further processing of the output document will be done with Pandoc.
However, many 3rd party tools work with other Markdown variants, such as
"strict" a.k.a. "basic" Markdown, or MultiMarkdown. Using the :option:`-t` /
:option:`--to` option, you can specify the target Markdown dialect like this::

  # for basic Markdown:
  pure-pandoc pure.txt -o pure.md -tmarkdown_strict
  # for MultiMarkdown:
  pure-pandoc pure.txt -o pure.md -tmarkdown_mmd

With the target format specification you can also selectively enable or
disable certain Markdown elements (called "extensions" in the Pandoc
documentation). E.g., to make the Marked_ previewer on the Mac happy, you may
want to produce MultiMarkdown documents with pipe tables, which can be done as
follows::

  pure-pandoc pure.txt -o pure.md -tmarkdown_mmd+pipe_tables

.. _Marked: http://marked2app.com/

Math elements (LaTeX inline and display formulas, ``:math:`` in RST) are fully
supported (as far as Pandoc supports them in the target document format). Note
that depending on the complexity of your formulas, you may have to use a
suitable math rendering engine for html output, such as ``--latexmathml`` or
``--mathjax``; please check the Pandoc documentation for details. For
instance::

  pure-pandoc pure.txt -o pure.html -O --mathjax

Internal section links, as well as links to RST link targets (see below), are
rendered as standard Markdown links by default. Normally these will become
inline links in generated Markdown output. If you prefer, you can force
implicit reference links of the form ``[name][]`` throughout by specifying the
:option:`-r` / :option:`--reference-links` option on the command line; this
option is simply passed to pandoc in the post-processing stage. Note, however,
that this may cause issues with generated link targets for Sphinx definitions
(see below), since these generally are case-sensitive whereas Markdown's
implicit link targets aren't, which might result in duplicate link targets in
the Markdown output. (You probably won't notice this until the Markdown
document gets processed with Pandoc again, so beware!)

Explicit RST link targets (``.. _name:``) in the source document are
translated to html link anchors (``<a name="id">``), so they should work as
expected at least in html output. There's no guarantee that they will work
with other target document types, though (most likely they won't), but since
Markdown doesn't offer any other possibility to link to arbitrary locations
inside a document, there's not much else we can do.

Sphinx definitions for options, functions, variables, etc. are by default
rendered as Markdown definition lists. This works fairly well, but has the
downside that the corresponding link targets must be coded using inline html,
which may not work with target document types other than html. As a remedy,
you can also translate such descriptions to Markdown section headers instead,
by using the :option:`-H` / :option:`--headers` option. pure-pandoc will then
use Pandoc's special PHP Markdown-style syntax for the section link targets.
This syntax isn't widely supported by 3rd party tools, but supposedy it works
at least with a few of Pandoc's own writer backends, so you *might* have
better luck getting these links to work with some non-html document types;
please check the Pandoc documentation for details.

External Document Links
=======================

Links across different documents are ubiquitous in the Pure documentation, so
pure-pandoc offers reasonably good support for them, considering Markdown's
and Pandoc's limitations. Cross-document links in the Sphinx source will thus
work without much ado (in html output at least), but since Pandoc has no
knowledge about Sphinx's cross-reference syntax, you need to explicitly create
an index file for all the documents using the :option:`-i` / :option:`--index`
option.

Cross-document links generally require that you run pure-pandoc on all
individual source documents *twice* (the index entries will be created or
updated during the first round of invocations, then the correct link targets
will be filled in during the second round). For instance, let's assume that
you have two documents ``a.rst`` and ``b.rst`` in a directory which link to
each other, then you can run pure-pandoc as follows on the individual
documents and have the required index file created along the way::

  for x in *.rst; do pure-pandoc $x -i index -o `basename $x .rst`.md; done

In our example this will create the Markdown documents ``a.md`` and ``b.md``
and an index file ``index``. You then just run the same command again to
obtain the final documents::

  for x in *.rst; do pure-pandoc $x -i index -o `basename $x .rst`.md; done

The resulting Markdown documents ``a.md`` and ``b.md`` will now have the
proper cross-document links of the form ``a.html#id`` and ``b.html#id`` so
that the links can be correctly resolved in generated html output::

  for x in *.md; do pandoc $x -o `basename $x .md`.html; done

Note: If all you need is the html output, then you might just as well create
it directly using pure-pandoc::

  for x in *.rst; do pure-pandoc $x -i index -o `basename $x .rst`.html; done

But creating intermediate files in Markdown format will be preferable if you
want to distribute the files or generate different output formats from them.

In any case, this approach assumes that the final output will be html
documents located in the same directory, and that the final documents have the
same basenames as the corresponding output files (if :option:`-o` is given;
otherwise, the script uses the basename of the first RST input file for each
document). If necessary (i.e., to use other filename extensions and/or
document paths), you can also specify a printf-style template for the document
part of the link targets with the :option:`-N` / :option:`--name` option; the
default naming scheme corresponds to ``-N "%s.html"``.

Please note that this elaborate procedure is only necessary if individual
Markdown documents are created from each RST source. If you pass the entire
collection of source documents to pure-pandoc in one go, then only a single
output file will be created, so all links between documents become internal
links in the output document. In this case no special processing is needed to
make links between different source documents work. Note, however, that this
approach requires that all link targets (especially the section names) in all
source documents be unique; otherwise you'll get duplicate link targets and
cross-references may point to the wrong locations in the output document.

Author
======

Albert Gr√§f <aggraef@gmail.com>

See Also
========

- pandoc(1)

- Docutils/RST: http://docutils.sourceforge.net

- Sphinx: http://sphinx-doc.org

- The source code of this program can be downloaded at
  http://purelang.bitbucket.org/.
