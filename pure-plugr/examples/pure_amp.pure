
// A simple PlugR audio plugin.

/* To compile this to a PlugR plugin: pure2plugr pure_amp.pure. You then need
   to move the resulting plugin binary to a location where your host
   application finds it. E.g., for VST plugins on Linux you'd use ~/.vst for a
   personal or /usr/lib/vst for a system-wide install. */

using plugr, system;

/* The `manifest` can be implemented either as a global variable or a
   parameterless function. In either case it must yield a list of port
   descriptions from which the plugin configuration is constructed. Each port
   description is a tuple with the following fields:

   - symbol is the port symbol (a string).

   - name is a more descriptive port name which is typically used as a label
     in the host GUI.

   - type is the type of port (control, audio, CV, midi), and flags the
     bitwise disjunction of some flags which indicate whether the port is an
     input or output port, along with some additional information. The
     plugr.pure module has symbolic constants for valid type and flags values,
     as well as a number of common type,flag combinations such as
     plugr::controlin, plugr:audioout, etc.

   - default, min, max and step indicate the default, minimum and maximum
     values and the step size of a port, if required. In addition, you can
     also specify a unit name such as "Hz" or "dB" for the port. These fields
     only apply to control or CV ports.

   The first field is mandatory; all other fields are optional. If no port
   name is specified, it is assumed to be the same as the port symbol. If no
   port type is specified, a control port is assumed. If no flags are
   specified, an input port is assumed. This makes it easy to specify a basic
   setup of unrestricted control input ports by just listing their names. For
   other port types, you'll have to specify at least the port type (and the
   flags, unless it's an input port). If the default, min, max and step fields
   are specified, then the implementation will ensure that the control is
   clamped to the given range and is quantized according to the given step
   size. The unit field may be used to display a unit name in the control GUI
   if the plugin host supports that. */

manifest =
  [// a control port
   ("vol", "Volume", plugr::controlin, 0.5, 0.0, 1.0, 0.01),
   // stereo audio input and output ports
   ("left-in", plugr::audioin), ("right-in", plugr::audioin),
   ("left-out", plugr::audioout), ("right-out", plugr::audioout)];

/* The `plugin` function is the "main" function of a plugin which is invoked
   with the plugin object (a pointer) as the first argument. The resulting
   closure or partial application is stored in the plugin object, so that
   subsequently the same closure is called each time the plugin is run or its
   activation status changes. This makes it possible to maintain some local
   state in the plugin function (such as the first_run value in the example
   below).

   The plugin function is invoked either with a truth value (true, false) or
   an empty tuple (). In the former case, the activation status (plugr::active)
   has changed, so the plugin can respond to these conditions by adjusting its
   internal state when it becomes active or inactive, respectively.

   The latter case (() argument) indicates that the plugin is run on a block
   of samples. The plugr.pure module provides us with some functions to read
   the input and write the output port values, including the sample data of
   audio ports, in order to implement the functionality of the plugin. */

plugin self = plugin with
  // The local plugin closure gets invoked to process a block of samples.
  plugin () = () when
    // We use a local reference variable here (see below) which lets us
    // remember whether we have invoked this code already. So the following
    // code gets invoked exactly once, at the time the plugin is first run, to
    // print some information about the plugin.
    get first_run ||
    printf "info = %s\nrate = %g, block size = %d, vol = %g\n"
    (str (plugr::info self), plugr::rate self,
     plugr::nsamples self, plugr::get_port self 0);
    put first_run true;
    // Process a block of samples.
    vol = plugr::get_port self 0; // control value from port #0 (control input)
    left = plugr::get_port self 1; // sample data from port #1 (audio input)
    right = plugr::get_port self 2; // sample data from port #2 (audio input)
    // Multiply the sample data with the vol control value and output the
    // resulting wave on port #3 and #4 (audio output).
    plugr::set_port self 3 (map (*vol) left);
    plugr::set_port self 4 (map (*vol) right);
  end;
end when
  // Local state. Note that all state which should be local to a single plugin
  // instance must be implemented as a local variable of the plugin function.
  // Global state may be shared between different instances of the same plugin
  // by assigning the state to a global Pure variable.
  first_run = ref false;
end;
