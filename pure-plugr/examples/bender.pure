
// bender.pure written by Albert Graef <aggraef@gmail.com> 2016-02-04

// This plugin maps pitch bends from a given source ("in") to a given target
// ("out") range specified in Cents (percents of a semitone). Both ranges
// default to 200 Cent (corresponding to the standard GM pitch bend range of 2
// semitones up and down) and can be adjusted separately between 0 Cents (no
// pitch bends) and 1200 Cents (1 octave up/down).

// A value of 0 Cents (either as "in" or "out" range or both) maps all pitch
// bends to the center value. Otherwise, all received pitch bend (14 bit)
// values in the source range are adjusted so that the resulting 14 bit values
// denote the same Cent value in the target range (clipping at the lower and
// upper ends of the target range if needed). Note that this means that if the
// output range in Cents is *larger* than the input range then the 14 bit
// values are *damped*, and if it is *smaller* then the 14 bit values are
// *amplified* (and possibly clipped) accordingly. If both ranges are the same
// then the pitch bend messages are left untouched. All other kinds of MIDI
// messages are passed through unchanged.

// To use this plugin, figure out what the absolute pitch bend ranges in Cent
// of your MIDI input and output gear (or virtual instruments) are. Then just
// dial these values into the "in" and "out" range controls, respectively. (If
// you don't know the exact bend ranges but the ratio x/y between "in" and
// "out" range, then you can also just use x and y as the values of the "in"
// and "out" controls, respectively.)

// EXAMPLE: The Korg Z3 guitar synthesizer defaults to a pitch bend range of
// 1200 Cent (1 octave up/down), which means that the pitch bend intervals
// generated by the Z3 will sound much too small on standard GM instruments.
// Dialing in 1200 as the "in" range and keeping the default 200 Cent "out"
// range will map the Z3's pitch bend messages to the standard GM range, so
// that the pitch bends will sound as intended on GM instruments (you can
// verify this by listening to both the Z3's built-in synth and the external
// GM synth at the same time).

// NOTE: The current implementation only modifies pitch bend messages as they
// are received. Thus changes of the "in" and "out" controls will only affect
// subsequent pitch bend messages, not any currently sounding pitch bends.

using plugr;

// Author and version information.
Author = "Albert Graef <aggraef@gmail.com>";
Version = "1.0";

let manifest =
  [("in range", plugr::controlin, 200, 0, 1200, 1),
   ("out range", plugr::controlin, 200, 0, 1200, 1),
   // MIDI input and output
   ("midiin", plugr::midiin), ("midiout", plugr::midiout)];

plugin self = plugin with
  plugin () = () when
    // current pitch bend ranges and corresponding scale factor
    inrange = plugr::get_port self 0;
    outrange = plugr::get_port self 1;
    scale = if outrange>0 then inrange/outrange else 0;
    // process incoming midi messages
    in = plugr::get_port self 2;
    out = map (pbscale scale) in;
    plugr::set_port self 3 out;
  end;
  // scale pitch bends, leave other MIDI messages unchanged
  pbscale scale (t,{st,lsb,msb}) = (t,{st,lsb,msb}) when
    // lsb+msb = 14 bit value, center value is 0x2000 == 8192
    pbval = int (round ((lsb + (msb << 7) - 0x2000) * scale)) + 0x2000;
    // clamp scaled value to maximum 14 bit range.
    pbval = (max 0 . min 0x3fff) pbval;
    // convert back to lsb/msb pair
    lsb, msb = pbval and 0x7f, pbval >> 7;
  end if ubyte st and 0xf0 == 0xe0;
  pbscale _ x = x otherwise;
end;
