// CC-Rider: Simple CC mapping and automation module.

// NOTE: The basic idea behind this plugin goes back to a guy named "Kyle" who
// created a "CC-Rider" plugin for use with Tracktion. Kyle's original
// (Windows) plugin seems to have disappeared from the net, so this little
// Pure implementation of the plugin will hopefully provide you with a
// suitable replacement.

// The ccrider plugin is deceptively simple and incredibly useful at the same
// time. It lets you "ride" an arbitrary collection of MIDI controllers and
// expose them as VST parameters so that they become automatable in pretty
// much any VST host; other MIDI input is passed through unchanged. This is
// useful, in particular, with external MIDI gear. Placing ccrider right
// before the DAW's MIDI output to the hardware device will expose the MIDI
// CCs as standard VST parameters, so that they can be operated, assigned to
// MIDI controls and automated just like any other VST controls. In addition,
// the plugin can also be used to process incoming MIDI CCs directly, and pass
// them on to its MIDI output, possibly remapping CCs on the fly (if you
// change the definition of the outccs variable below accordingly). Of course,
// to make all of this work, you'll need MIDI gear or software which actually
// processes MIDI CCs.

// The generic version of ccrider implemented below provides 8 MIDI CCs (1-8)
// on the first MIDI channel, using generic VST parameter names C1-8. But you
// can easily adjust the module to your own needs, by editing the lists of
// controller names and numbers below as needed. E.g., you might want to
// change the parameter names to something more meaningful, add as many
// controls as you want, change the CC mapping, etc. It's also possible to
// adjust the MIDI input and output channels by changing the inch and outch
// variables accordingly, or disable MIDI input or output altogether if it's
// not needed, by setting the corresponding variable to -1.

using plugr, orddict, system;

// Author and version information.
Author = "Albert Graef <aggraef@gmail.com>";
Version = "1.0";

// MIDI input/output channels we process (use -1 to disable controller input
// or output, respectively)
let inch, outch = 0, 0;

// Number of VST parameters. By default, these also specify the number of MIDI
// CCs (in the range 1..nparams) we process (see the definitions of inccs and
// outccs below).
let nparams = 8;

// MIDI input and corresponding output CCs. You can either edit these directly
// for custom setups, or go with the default setup and just modify the nparams
// setting above. Note that in any case the number of input and output CCs
// should be equal. Also note that in the current version of the plugin the CC
// mapping is static, but the plugin code could easily be changed to make the
// CC mapping adjustable at run-time through additional VST parameters.
let inccs = 1..nparams;
let outccs = 1..nparams;

// Control names. In the generic version this is just "C" + the (input) CC
// numbers, but you can adjust this as needed. Note that these are the
// parameter names which will be exposed to the VST host.
let ccnames = map (sprintf "C%d") inccs;

// Initial values, ranges and step size of the VST parameters. In the generic
// version the initial values are all zero and the ranges are 0..127 with a
// step size of 1, corresponding to the usual MIDI CC data range. But the
// parameter ranges and step sizes are in fact independent of the MIDI CC
// ranges, so that you can adjust them freely for each control as needed.
// Mapping between the parameter ranges and MIDI CC data is automatic. (Both
// integer and floating point ranges and step sizes are possible, and step
// sizes may also be negative; the only restriction is that step sizes should
// never be zero.)
let ccvals = [(0,0,127,1) | cc = inccs];

// Usually there's no need to edit below this line. //////////////////////////

// The plugin manifest. This is constructed automatically from the data above.
let manifest =
  // the controls
  [(name, plugr::controlin, vals) | name,vals = zip ccnames ccvals] +
  // MIDI input and output
  [("midiin", plugr::midiin), ("midiout", plugr::midiout)];

// Manifest data used by the mapping function
let nccs = #ccvals;

// The plugin function.
plugin self = plugin with
  plugin () = () when
    // Process incoming midi messages.
    in = plugr::get_port self nccs;
    // Update the current control values with incoming CCs on our input
    // channel. Other MIDI data is passed through unchanged.
    in, ccin = if plugr::active self && inch >= 0 then
		 filter (notchan inch) in, filter (chan inch) in
	       else in, [] with
		 chan c (t,{st,no,val}) = true if ubyte st == 0xb0+c;
		 chan _ _ = false otherwise;
		 notchan c msg = ~chan c msg;
	       end;
    vals = orddict [i=>v | t,{st,i,v} = ccin];
    null ccin || void
    [plugr::set_port self i (midi2val c (vals!j)) |
     i,j,c = zip3 (0..nccs-1) inccs ccvals; member vals j];
    // Get the current control values.
    actvals = [plugr::get_port self i | i = 0..nccs-1];
    // Update the old control values as needed and generate corresponding CC
    // messages on out output channel.
    ccout = if plugr::active self && outch >= 0 then
	      filter ok [update i x r c |
			 i,x,r,c = zip (zip3 outccs actvals oldvals) ccvals]
	    else [] with
	      update i x r c = if x ~= get r then
			       put r x $$ {0xb0+outch,i,val2midi c x}
			     else ();
	      ok () = false; ok _ = true otherwise;
	    end;
    // Output is the remaining input along with any generated CC messages.
    out = if plugr::active self then ccout+in else [];
    // Print our output on stdout, for debugging purposes.
    //~listp out || null out || do (printf "midiout: %s\n".str) out;
    // Output the messages on midi output.
    plugr::set_port self (nccs+1) out;
  end;
  // Translate between CC and control values.
  midi2val (x0,x1,x2,dx) v = double
    (clamp x1 x2 (roundto dx (v/127*(x2-x1))+x1));
  val2midi (x0,x1,x2,dx) v = int
    (clamp 0 127 (round ((v-x1)/(x2-x1)*127)));
  clamp x1 x2 x = clamp x2 x1 x if x1>x2;
  clamp x1 x2 x = max x1 (min x2 x);
  roundto dx x = x if dx==0;
  roundto dx x = round (x/dx) * dx;
end when
  oldvals = [ref x0 | x0,_ = ccvals];
end;
