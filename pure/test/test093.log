let pat = "[[:alpha:]][[:alnum:]]*";
let s = "1var foo 99 BAR $%&";
regex pat 0 s 0;
1,1,"var"
regex pat _REG_NOSUB s 0;
1
regexg id pat 0 s 0;
[(1,"var"),(5,"foo"),(12,"BAR")]
regexgg id pat 0 s 0;
[(1,"var"),(2,"ar"),(3,"r"),(5,"foo"),(6,"oo"),(7,"o"),(12,"BAR"),(13,"AR"),(14,"R")]
regexg (flip (!) 1) pat 0 s 0;
["var","foo","BAR"]
list (regexgs id pat 0 s 0);
[(1,"var"),(5,"foo"),(12,"BAR")]
regsub (sprintf "<%d:%s>") pat 0 s 0;
"1<1:var> <5:foo> 99 <12:BAR> $%&"
let delim = "[[:space:]]+";
regsplit delim _REG_EXTENDED s 0;
["1var","foo","99","BAR","$%&"]
regsplit delim _REG_EXTENDED "The   quick brown    fox" 0;
["The","quick","brown","fox"]
list (regsplits "[[:space:]]+" _REG_EXTENDED "The   quick brown    fox" 0);
["The","quick","brown","fox"]
regexg id "o*" _REG_EXTENDED "foo" 0;
[(0,""),(1,"oo"),(3,"")]
regexgg id "o*" _REG_EXTENDED "foo" 0;
[(0,""),(1,"oo"),(2,"o"),(3,"")]
regsub (cst " ") " ?" _REG_EXTENDED "some text" 0;
" s o m e  t e x t "
regsplit " ?" _REG_EXTENDED "some text" 0;
["","s","o","m","e","","t","e","x","t",""]
let env_pat = "^([^=\n]+)=(.*)$";
let env_str = "SHELL=/bin/sh\nHOME=/home/bar\n";
regex env_pat (_REG_EXTENDED or _REG_NEWLINE) "SHELL=/bin/sh" 0;
1,0,"SHELL=/bin/sh",0,"SHELL",6,"/bin/sh"
parse_env s/*0:1*/ = regexg (\info/*0:1*/ -> info/*0:1*/!3=>info/*0:1*/!5 {
  rule #0: _ info = info!3=>info!5
  state 0: #0
	<var> state 1
  state 1: #0
}) env_pat (_REG_EXTENDED or _REG_NEWLINE) s/*0:1*/ 0;
{
  rule #0: parse_env s = regexg (\info -> info!3=>info!5) env_pat (_REG_EXTENDED or _REG_NEWLINE) s 0
  state 0: #0
	<var> state 1
  state 1: #0
}
parse_env env_str;
["SHELL"=>"/bin/sh","HOME"=>"/home/bar"]
regexg id env_pat (_REG_EXTENDED or _REG_NEWLINE) env_str 0;
[(0,"SHELL=/bin/sh",0,"SHELL",6,"/bin/sh"),(14,"HOME=/home/bar",14,"HOME",19,"/home/bar")]
{
  rule #0: env = record (parse_env env_str)
  state 0: #0
	<var> state 1
  state 1: #0
}
let env = record (parse_env env_str);
#env;
2
env!!["SHELL","HOME"];
{"/bin/sh","/home/bar"}
if stringp pcre_version then regex "(?:Bob says: (\\w+))" 0 "Bob says: Go" 0===(1,0,"Bob says: Go",10,"Go") else regex "(?:Bob says: (\\w+))" 0 "Bob says: Go" 0===0;
1
