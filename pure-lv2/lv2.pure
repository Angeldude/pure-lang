
/* Some interface operations for use by Pure LV2 plugins. 2014-02-28 Copyright
   (c) 2014 by Albert Gr√§f <aggraef@gmail.com>. Distributed under the new BSD
   license, please see the accompanying COPYING file for details. */

using "lib:lv2";
namespace lv2;

// This is passed to the plugin in order to retrieve the manifest (port
// descriptions).
nonfix info;

// Some constants for the manifest (port types and flags).
const control_port, audio_port, cv_port, atom_port = 1,2,3,4;
const input_port, output_port, midi_port = 1,2,4;
// Add these flags to indicate a toggle (0/1) or integer control.
const toggle, integer = 8,16;

// Some common type/flag combinations.
const controlin  = control_port, input_port;
const controlout = control_port, output_port;
const audioin    = audio_port, input_port;
const audioout   = audio_port, output_port;
const cvin       = cv_port, input_port;
const cvout      = cv_port, output_port;
const midiin     = atom_port, input_port or midi_port;
const midiout    = atom_port, output_port or midi_port;

const controlin_toggle   = control_port, input_port or toggle;
const controlout_toggle  = control_port, output_port or toggle;
const controlin_integer  = control_port, input_port or integer;
const controlout_integer = control_port, output_port or integer;

/* Retrieve various information about the plugin (manifest, activation status,
   sample rate, block size, bundle path). Note that the plugin parameter to be
   passed to these routines should be the same as the first argument passed to
   the plugin function. Also note that this data only becomes available after
   the plugin has been initialized and starts running.

   The manifest (port descriptions) is returned as a list of tuples for each
   port of the plugin which take the following form: (symbol, name, type,
   flags, default, min, max)

   - symbol is the port symbol (a string).

   - name is a more descriptive port name which is typically used as a label
     in the LV2 host GUI.

   - type is the type of port (control, audio, CV, midi), and flags the
     bitwise disjunction of some flags which indicate whether the port is an
     input or output port, along with some additional information. The
     symbolic constants defined above denote valid type and flags values, as
     well as a number of common type,flag combinations such as lv2::controlin,
     lv2:audioout, etc.

   - default, min and max indicate the default, minimum and maximum values of
     a port, if set. These fields are only returned for control and CV ports
     (in this case a nan value indicates that the corresponding field was not
     set when creating the plugin).

   These fields are in 1-1 correspondence with the manifest data returned by
   the plugin at instantiation time, when the plugin function is invoked with
   the lv2::info parameter. However, in the manifest returned by the plugin
   only the first field is mandatory. All other fields can be omitted, in
   which case reasonable defaults will be provided; you can then use
   lv2::get_info to see exactly which defaults were provided. (If no port name
   was specified, it is assumed to be the same as the port symbol. If no port
   type was specified, a control port is assumed. If no flags were specified,
   an input port is assumed. If the default, min and max fields were omitted,
   no default value and range is set for the port.) */

extern expr *lv2pure_info(LV2Plugin *p) = get_info;
extern int lv2pure_active(LV2Plugin *p) = active;
extern double lv2pure_rate(LV2Plugin *p) = rate;
extern int lv2pure_nsamples(LV2Plugin *p) = nsamples;
extern expr *lv2pure_path(LV2Plugin *p) = path;

/* Get and set port values. The actual values depend on the port type (double
   for control ports, double vector for audio and cv ports, list of
   timestamped midi events for midi ports). In the latter case, each midi
   message is denoted as a pair consisting of an int (the timestamp, which is
   a frame count relative to the beginning of the current block of samples)
   and an int vector (the bytes making up a single MIDI message). On output
   (lv2::set_port), the timestamp is optional (a zero default value is used in
   this case). */

extern expr *lv2pure_get(LV2Plugin *p, int k) = get_port;
extern expr *lv2pure_set(LV2Plugin *p, int k, expr *x) = set_port;
