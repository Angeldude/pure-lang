
/* Some interface operations for use by Pure LV2 plugins. 2014-02-28 Copyright
   (c) 2014 by Albert Gr√§f <aggraef@gmail.com>. Distributed under the new BSD
   license, please see the accompanying COPYING file for details. */

using "lib:lv2";
namespace lv2;

// Keys for transport data. These are used in records returned for time /
// position information from atom ports which have the lv2::time_port flag
// set, please check the description of lv2::get_port below for details.
nonfix bpm meter speed bar beat;

// Some constants for the manifest (port types and flags).
const control_port, audio_port, cv_port, atom_port = 1,2,3,4;
const input_port, output_port, midi_port, time_port = 1,2,4,8;
// Flags to indicate a toggle (0/1) or integer control.
const toggle, integer = 16,32;
// Flags for special control input port designations for transport data.
const time_ticks, time_bar, time_beat, time_beat_unit, time_beats_per_bar,
  time_bpm, time_frame, time_fps, time_speed = 1<<6, 1<<7, 1<<8, 1<<9, 1<<10,
    1<<11, 1<<12, 1<<13, 1<<14;

// Some common type/flag combinations.
const controlin   = control_port, input_port;
const controlout  = control_port, output_port;
const audioin     = audio_port, input_port;
const audioout    = audio_port, output_port;
const cvin        = cv_port, input_port;
const cvout       = cv_port, output_port;
const midiin      = atom_port, input_port or midi_port;
const midiout     = atom_port, output_port or midi_port;

// atom/midi inputs with transport information (Ardour)
const timein      = atom_port, input_port or time_port;
const time_midiin = atom_port, input_port or midi_port or time_port;

// controls restricted to toggle and integer values
const controlin_toggle   = control_port, input_port or toggle;
const controlout_toggle  = control_port, output_port or toggle;
const controlin_integer  = control_port, input_port or integer;
const controlout_integer = control_port, output_port or integer;

// time/transport controls (Qtractor)
const controlin_ticks         = control_port, input_port or time_ticks;
const controlin_bar           = control_port, input_port or time_bar;
const controlin_beat          = control_port, input_port or time_beat;
const controlin_beat_unit     = control_port, input_port or time_beat_unit;
const controlin_beats_per_bar = control_port, input_port or time_beats_per_bar;
const controlin_bpm           = control_port, input_port or time_bpm;
const controlin_frame         = control_port, input_port or time_frame;
const controlin_fps           = control_port, input_port or time_fps;
const controlin_speed         = control_port, input_port or time_speed;

/* Retrieve various information about the plugin (manifest, activation status,
   sample rate, block size, bundle path). Note that the plugin parameter to be
   passed to these routines should be the same as the first argument passed to
   the plugin function. Also note that this data only becomes available after
   the plugin has been initialized and starts running.

   The manifest (port descriptions) is returned as a list of tuples for each
   port of the plugin which take the following form: (symbol, name, type,
   flags, default, min, max)

   - symbol is the port symbol (a string).

   - name is a more descriptive port name which is typically used as a label
     in the LV2 host GUI.

   - type is the type of port (control, audio, CV, midi), and flags the
     bitwise disjunction of some flags which indicate whether the port is an
     input or output port, along with some additional information. The
     symbolic constants defined above denote valid type and flags values, as
     well as a number of common type,flag combinations such as lv2::controlin,
     lv2:audioout, etc.

   - default, min and max indicate the default, minimum and maximum values of
     a port, if set. These fields are only returned for control and CV ports
     (in this case a nan value indicates that the corresponding field was not
     set when creating the plugin).

   These fields are in 1-1 correspondence with the manifest data returned by
   the plugin at instantiation time, when the plugin function is invoked with
   the lv2::info parameter. However, in the manifest returned by the plugin
   only the first field is mandatory. All other fields can be omitted, in
   which case reasonable defaults will be provided; you can then use
   lv2::get_info to see exactly which defaults were provided. (If no port name
   was specified, it is assumed to be the same as the port symbol. If no port
   type was specified, a control port is assumed. If no flags were specified,
   an input port is assumed. If the default, min and max fields were omitted,
   no default value and range is set for the port.) */

extern expr *lv2pure_info(LV2Plugin *p) = info;
extern int lv2pure_active(LV2Plugin *p) = active;
extern double lv2pure_rate(LV2Plugin *p) = rate;
extern int lv2pure_nsamples(LV2Plugin *p) = nsamples;
extern expr *lv2pure_path(LV2Plugin *p) = path;

/* Audio and midi inputs and outputs of the plugin. Each of these functions
   returns a list of the corresponding port indices. */

extern expr *lv2pure_audio_inputs(LV2Plugin *p) = audio_inputs;
extern expr *lv2pure_audio_outputs(LV2Plugin *p) = audio_outputs;
extern expr *lv2pure_midi_inputs(LV2Plugin *p) = midi_inputs;
extern expr *lv2pure_midi_outputs(LV2Plugin *p) = midi_outputs;

/* Get and set port values. The actual values depend on the port type (double
   for control ports, double vector for audio and cv ports, list of
   timestamped midi events for midi ports).

   In the latter case, each midi message is denoted as a pair consisting of an
   int (the timestamp, which is a frame count relative to the beginning of the
   current block of samples) and an int vector (the bytes making up a single
   MIDI message). On output (lv2::set_port), the timestamp is optional (a zero
   default value is used in this case).

   lv2::get_port also offers basic support for the LV2 time extension.
   Unfortunately, LV2 hosts implement this extension in very different ways,
   if at all. Specifically, Ardour will deliver special position events if an
   atom input port has the lv2::time_port flag is set. Note that if the port
   has both the lv2::midi_port and the lv2::time_port flag set, then transport
   information and midi events will be intermingled, as the host delivers
   them. The position data is encoded as a pair consisting of a timestamp and
   a Pure record containing the available information. The record may have the
   following fields:

   - lv2::bpm (double): Tempo in beats per minute.

   - lv2::meter (pair of numbers): The meter, such as 4,4. The first number
     denotes the number of beats per bar (this is usually a small integer, but
     it may also be a floating point number if it has a fractional part), the
     second number the note value that counts as one beat (this is always an
     integer and usually a power of 2, such as 4 = crotchet, 8 = quaver, etc.).

   - lv2::speed (double): Playback speed. Usually this will be either 1.0 if
     the transport is rolling, or 0.0 if it is stopped. But the LV2 spec
     allows any floating point value here, including negative ones for reverse
     playback.

   - lv2::bar (int): The bar number of the current playback position, counting
     from 0.

   - lv2::beat (double): The beat number of the current playback position
     inside the current bar, counting from 0. This is a floating point value,
     so a beat number of, say, 1.5 in a 4/4 meter would indicate the fourth
     quaver of the bar.

   Note that these messages will generally only be delivered if there is a
   change in the transport state (tempo change, transport started or stopped,
   manual change of the playback position, etc.). So this information can be
   used to synchronize playback with the LV2 host, but the plugin still needs
   to count off musical time by itself if this information is needed.

   Qtractor implements the time extension in a completely different way, by
   assigning them to control input ports which have some special designations
   set on them. The interpretation of the position data is also slightly
   different (e.g., Qtractor counts bars and beats from 1, not from 0). To
   access this data from a Pure plugin, you'll have to set the corresponding
   flags in the port descriptions (lv2::time_ticks, lv2::time_bar, etc.). You
   can then use lv2::get_port on the corresponding control ports to read the
   position data as usual. */

extern expr *lv2pure_get(LV2Plugin *p, int k) = get_port;
extern expr *lv2pure_set(LV2Plugin *p, int k, expr *x) = set_port;
