
using lilv, system;

// Load all plugins.
let world = lilv::world;

// This gives the names and URIs of all plugins as a list.
lilv::plugins world;

/***************************************************************************
 * Getting information about a plugin. Lilv can do this without actually
 * loading the plugin, by just looking at the ttl files in a bundle.
 * NOTE: The following example requires the Calf LV2 plugins to work
 * (http://calf.sourceforge.net/).
 ***************************************************************************/

/* This gives the description of a specific plugin identified by its URI. The
   fields are: name, uri, class, author, email, homepage, bundle uri, binary
   (shared lib) uri, data uris (ttl files), required properties, optional
   properties, extension data, presets and ports. Most of the items are either
   simple strings or URIs. Presets are given as a list of pairs of preset
   names and URIs. Port descriptions are given as a list of tuples with port
   numbers, symbols, names, type of port and various other attributes and
   properties pertaining to a port. Please check lilv.pure for details. */

lilv::info world "http://calf.sourceforge.net/plugins/Organ";

/* Most of the time just the basic info is needed (name, uri, class, and basic
   ports info which includes port number, symbol, name, type, flags and (in
   the case of control ports) the minimum, maximum and default value, and the
   list of scale points of the control). */

lilv::basic_info world "http://calf.sourceforge.net/plugins/Organ";

// A little helper function to print the (basic or extended) info of a plugin
// in a readable format.

print (name, uri, class, author, email, homepage, bundle, binary, data_uris,
       required, optional, extension_data, presets, ports) = ()
when
  printf "%s - %s\n" (name, uri);
  null class || printf "class: %s\n" class;
  null author || printf "author: %s\n" author;
  null email || printf "email: %s\n" email;
  null homepage || printf "homepage: %s\n" homepage;
  printf "bundle: %s\n" bundle;
  null binary || printf "binary: %s\n" binary;
  null data_uris || (puts "data uris:" $$ do puts data_uris);
  null required || (puts "required features:" $$ do puts required);
  null optional || (puts "optional features:" $$ do puts optional);
  null extension_data || (puts "extension data:" $$ do puts extension_data);
  null presets || (puts "presets:" $$ do (printf "%s - %s\n") presets);
  printf "%d ports:\n" (#ports);
  do print_port ports with
    print_port (num,sym,name,ty,flags,groups,designations,properties,
		min,max,defl,sp) =
      printf "#%d: [%s] %s \"%s\" %s %g .. %g [%g]%s%s%s%s\n"
      (num,flags,sym,name,ty,min,max,defl,sp,
       groups,designations,properties) when
	in = flags and 1; out = flags and 2; midi = flags and 4;
	flags = if in&&out then "in/out" else if in then "in"
					 else if out then "out" else "???";
	types = {"UNKNOWN", "CONTROL", "AUDIO", "CV", "ATOM", "EVENT"};
	ty = types!ty;
	ty = if midi then ty+" [MIDI]" else ty;
	groups =
	  if null groups then ""
	  else "\ngroups:" + strcat (map (sprintf "\n\t%s") groups);
	designations =
	  if null designations then ""
	  else "\ndesignations:" +
	    strcat (map (sprintf "\n\t%s") designations);
	properties =
	  if null properties then ""
	  else "\nproperties:" + strcat (map (sprintf "\n\t%s") properties);
	sp =
	  if null sp then ""
	  else "\nscale points:" + 
	    strcat [sprintf "\n\t%s: %g" (name,val) | name=>val = sp];
      end;
    print_port (num,sym,name,ty,flags,groups,designations,properties) =
      printf "#%d: [%s] %s \"%s\" %s%s%s%s\n"
      (num,flags,sym,name,ty,groups,designations,properties) when
	in = flags and 1; out = flags and 2; midi = flags and 4;
	flags = if in&&out then "in/out" else if in then "in"
					 else if out then "out" else "???";
	types = {"UNKNOWN", "CONTROL", "AUDIO", "CV", "ATOM", "EVENT"};
	ty = types!ty;
	ty = if midi then ty+" [MIDI]" else ty;
	groups =
	  if null groups then ""
	  else "\ngroups:" + strcat (map (sprintf "\n\t%s") groups);
	designations =
	  if null designations then ""
	  else "\ndesignations:" +
	    strcat (map (sprintf "\n\t%s") designations);
	properties =
	  if null properties then ""
	  else "\nproperties:" + strcat (map (sprintf "\n\t%s") properties);
      end;
    print_port num::int = printf "#%d: unknown/illegal\n" num;
  end;
end;

print (name, uri, class, ports) = ()
when
  printf "%s - %s\n" (name, uri);
  null class || printf "class: %s\n" class;
  printf "%d ports:\n" (#ports);
  do print_port ports with
    print_port (num,sym,name,ty,flags,min,max,defl,sp) =
      printf "#%d: [%s] %s \"%s\" %s %g .. %g [%g]%s\n"
      (num,flags,sym,name,ty,min,max,defl,sp) when
	in = flags and 1; out = flags and 2; midi = flags and 4;
	flags = if in&&out then "in/out" else if in then "in"
					 else if out then "out" else "???";
	types = {"UNKNOWN", "CONTROL", "AUDIO", "CV", "ATOM", "EVENT"};
	ty = types!ty;
	ty = if midi then ty+" [MIDI]" else ty;
	sp =
	  if null sp then ""
	  else "\nscale points:" + 
	    strcat [sprintf "\n\t%s: %g" (name,val) | name=>val = sp];
      end;
    print_port (num,sym,name,ty,flags) =
      printf "#%d: [%s] %s \"%s\" %s\n" (num,flags,sym,name,ty) when
	in = flags and 1; out = flags and 2; midi = flags and 4;
	flags = if in&&out then "in/out" else if in then "in"
					 else if out then "out" else "???";
	types = {"UNKNOWN", "CONTROL", "AUDIO", "CV", "ATOM", "EVENT"};
	ty = types!ty;
	ty = if midi then ty+" [MIDI]" else ty;
      end;
    print_port num::int = printf "#%d: unknown/illegal\n" num;
  end;
end;

puts "\n** complete info:";
print $ lilv::info world "http://calf.sourceforge.net/plugins/Organ";

puts "\n** basic info:";
print $ lilv::basic_info world "http://calf.sourceforge.net/plugins/Organ";

/***************************************************************************
 * Instantiating and running a plugin. NOTE: The following example requires
 * the Faust-LV2 plugins to work (http://code.google.com/p/faust-lv2/).
 ***************************************************************************/

// Instantiate a plugin. We need to specify the intended sampling rate and
// the maximum block size (number of samples to be processed in one go).

let p = lilv::plugin world "http://faust-lv2.googlecode.com/amp" 44100 64;

// Let's get some information about the plugin (number of audio input/output
// ports, port descriptions).

let n,m = lilv::num_audio_inputs p, lilv::num_audio_outputs p;
let ports = [i, lilv::port_info p i | i = 0..lilv::num_ports p-1];

n,m; ports;

// The lilv:audio_inputs and lilv:audio_outputs functions return the list of
// audio input/output port numbers, so you can retrieve the descriptions of
// just the audio ports as follows:

ports!!lilv::audio_inputs p;
ports!!lilv::audio_outputs p;

// Create some buffers. Note that we can use any block size here, as long as
// it doesn't exceed the maximum block size we specified when instantiating
// the plugin. The number of rows needs to match up with the number of audio
// input/output ports, however.

// Input buffer with some pulses.
let in = dmatrix {0,1,0,-1,0,1,-1,0;0,1,0,-1,0,1,-1,0};
// Output buffer (just a zero matrix).
let out = dmatrix (2,8);

// We first need to activate the plugin.
lilv::activate p;

// Now let's run some samples through the plugin.
lilv::run p in out;

// Port #2 is used to set the gain (amplification in dB).
lilv::get_control p 2;
// Let's change it and run the plugin again.
lilv::set_control p 2 10;
lilv::get_control p 2;
lilv::run p in out;

// Port #4 and #5 are control outputs of the plugin with the SPL in dB on the
// left and the right channel.
map (lilv::get_control p) [4,5];

// Let's compute some more samples. This will show that the values of port #4
// and #5 continue to change.
lilv::run p in out;
map (lilv::get_control p) [4,5];

// You get the idea...
lilv::set_control p 2 (-96);
lilv::run p in out;
map (lilv::get_control p) [4,5];
lilv::run p in out;
map (lilv::get_control p) [4,5];

// Plugins may also have MIDI (LV2 atom or event) ports. Thus a typical
// iteration of a realtime loop would actually involve setting up the input
// controls and/or passing any MIDI input, then run the plugin on its audio
// input (if any) to give the audio output, and finally grab the control and
// MIDI output from the plugin (if needed).

// Let's have a look at the MIDI ports of this plugin:
ports!!lilv::midi_inputs p;
ports!!lilv::midi_outputs p;

// So there's one MIDI input port (port #10). Looking at the Faust code of the
// plugin, we see that MIDI controller #7 can be used to control the gain
// value, so we can do this to crank up the gain to its maximum:
lilv::set_midi p 10 [{0xb0, 7, 127}];
lilv::run p in out;
map (lilv::get_control p) [4,5];

// Also, MIDI controller #8 controls the balance, so we can do this to move
// the balance to the right:
lilv::set_midi p 10 [{0xb0, 8, 100}];
lilv::run p in out;
map (lilv::get_control p) [4,5];

// If the plugin supports it (the faust-lv2 plugins actually don't, but let's
// pretend this for the sake of illustration), it is also possible to specify
// sample-accurate offsets as timestamps for the MIDI messages as follows:
lilv::set_midi p 10 [(4,{0xb0, 8, 64})];
lilv::run p in out;
map (lilv::get_control p) [4,5];

// Finally, the presets. If an LV2 plugin has any presets associated with it,
// the lilv::presets function will return their names and corresponding URIs
// (as with plugins, the latter are used to identify a preset and may be
// specified to load it).
lilv::presets p;

// Ok, so the amp plugin doesn't have any presets. But we can make our own
// from the current state of our plugin instance:
let ps =
  lilv::get_preset world "http://faust-lv2.googlecode.com/presets#myamp" p;

// Note that we invented our own URI for the preset there. The result is a
// string in Turtle syntax. Here is how it looks like:
puts ps;

// You can reload the saved plugin state at any time:
lilv::set_control p 2 10, lilv::set_control p 3 1;
map (lilv::get_control p) [2,3];
lilv::set_preset world ps p;
map (lilv::get_control p) [2,3];
