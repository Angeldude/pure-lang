
/* Lilv bindings for the Pure programming language, Copyright (c) 2014 by
   Albert Gr√§f <aggraef@gmail.com>. Distributed under a 3-clause BSD license,
   please see the COPYING file included in the distribution for details. */

using "lib:lilv";

namespace lilv;

private extern LilvWorld* lilv_world_new();
private extern void lilv_world_load_all(LilvWorld*);
private extern void lilv_world_free(LilvWorld*);

/* lilv::world: Load the lilv world state, including the list of all available
   plugins. This returns a pointer which can be passed to the other
   operations. Resources are freed automatically when the returned object is
   garbage-collected. Note that each call to this function returns a new (the
   current) state which may change over time, as LV2 plugins are installed or
   deleted on your system. */

world = sentry lilv_world_free w when
  w = lilv_world_new;
  lilv_world_load_all w;
end;

/* lilv::plugins: Return the list of all plugins, as pairs of plugin names and
   URIs. The latter are what you need to pass to lilv::info or lilv::plugin to
   get information about a particular plugin or instantiate it. */

extern expr *lilv_plugins(LilvWorld* world) = plugins;

/* lilv::info: Retrieve the description of a specific plugin. The result is a
   tuple with the following fields: name, uri, class, author, email, homepage,
   bundle uri, binary (shared lib) uri, data uris (ttl files), required
   properties, optional properties, extension data, presets, and ports.

   Most of these items are either simple strings or URIs. Presets are given as
   a list of pairs of preset names and URIs. The ports list contains
   descriptions of all ports the plugin provides. Each entry in the ports list
   is a tuple with port number, symbol, name, type (1 = control, 2 = audio,
   3 = CV (control data at audio rate), 4 = atom, 5 = event port, 0 = unknown),
   flags (or'ed together: 1 = input, 2 = output, 4 = midi atom/event port),
   groups, designations, properties, and (in the case of control ports) the
   minimum, maximum and default value and the list of scale points of the
   control.

   Please check the LV2 documentation for information about these elements.
   The essential information is in the name, uri and class fields, and in the
   port descriptions; most notably, port number, symbol, name, type, flags and
   (in the case of control ports) the minimum, maximum and default value, and
   the list of scale points of the control. To make it easier to handle the
   amount of information, we also provide a helper function which just returns
   the essential information (lilv::basic_info); this will contain most things
   needed by a basic LV2 host implementation.

   Please note that this data is for purely informational purposes, it is not
   needed to actually instantiate and run a plugin. Runnable instances of a
   plugin, which can be obtained with lilv::plugin below, provide all the data
   necessary to operate the plugin. */

extern expr *lilv_plugin_info(LilvWorld* world, char* uri) = info;

basic_info world uri::string = case info world uri of
  name, uri, class, author, email, homepage, bundle, binary, data_uris,
  required, optional, extension_data, presets, ports =
    name, uri, class, map port_info ports with
      port_info (num,sym,name,ty,flags,groups,designations,properties,attr) =
	num,sym,name,ty,flags,attr;
      port_info (num,sym,name,ty,flags,groups,designations,properties) =
	num,sym,name,ty,flags;
      port_info x = x otherwise;
    end;
end;

/* lilv::plugin: Instantiate a plugin given by its URI. This also takes care
   of setting up the required data structures and binding the ports. You need
   to specify the sample rate and a maximum block size (the actual number of
   samples used in a run of the plugin can be adjusted as needed, but may not
   exceed this number). The return value is a pointer to the plugin instance
   (or NULL in case of error), which can be passed to the other operations
   below. The object takes care of freeing all its resources when it is
   garbage-collected. */

private extern PluginInstance *lilv_plugin_new
  (LilvWorld* world, char* uri, double sample_rate, int block_size);
private extern void lilv_plugin_free(PluginInstance *p);

plugin world uri sample_rate::int block_size =
  plugin world uri (double sample_rate) block_size;
plugin world::pointer uri::string sample_rate::double block_size::int =
  sentry lilv_plugin_free (lilv_plugin_new world uri sample_rate block_size);

// Activate and deactivate the plugin.

extern void lilv_plugin_activate(PluginInstance *p) = activate;
extern void lilv_plugin_deactivate(PluginInstance *p) = deactivate;

/* lilv::run: Run the plugin on a given block of samples.

   The input samples are given as a k x n Pure double matrix. The k rows of
   the input matrix specify the sample blocks for the audio/CV input ports of
   the plugin (where k >= lilv::num_inputs(p), see below).

   The output samples produced by the plugin are written to a second l x m
   double matrix, whose l rows correspond to the audio/CV output ports of the
   plugin (where l >= lilv::num_outputs(p), see below). The output matrix is
   modified in-place and also returned as the result of the operation.

   The number of rows in the input and output matrices may exceed the actual
   number of audio/CV input/output ports, in which case only the first
   lilv::num_inputs(p) and lilv::num_outputs(p) rows are used, respectively
   (the rest of the output matrix remains unchanged). If the input or output
   matrix doesn't have enough rows then the operation fails.

   The actual block size (number of samples to be processed) is given by the
   minimum row size (min n m) of the input and output matrices. Moreover, the
   number of samples may not exceed the maximum block size set when
   instantiating the plugin (or with a call to lilv::set_block_size, see
   below); any extra columns of the input and output matrices will be silently
   ignored. */

extern expr *lilv_plugin_run(PluginInstance *p, expr *in, expr *out) = run;

/* Retrieve and manipulate the plugin data. You can retrieve the sample rate,
   maximum block and event buffer sizes, total number of ports, and the number
   of audio/CV and MIDI atom/event input and output ports, as well as their
   port numbers. You can also adjust the maximum block and event buffer sizes,
   but note that these are a fairly expensive operations involving the
   reallocation of the input/output buffers, so this shouldn't be done during
   realtime processing. */

extern double lilv_plugin_sample_rate(PluginInstance *p) = sample_rate;
extern int lilv_plugin_block_size(PluginInstance *p) = block_size;
extern int lilv_plugin_midi_buffer_size(PluginInstance *p) = midi_buffer_size;
extern int lilv_plugin_num_ports(PluginInstance *p) = num_ports;
extern int lilv_plugin_num_audio_inputs(PluginInstance *p) = num_audio_inputs;
extern int lilv_plugin_num_audio_outputs(PluginInstance *p) = num_audio_outputs;
extern expr *lilv_plugin_audio_inputs(PluginInstance *p) = audio_inputs;
extern expr *lilv_plugin_audio_outputs(PluginInstance *p) = audio_outputs;
extern int lilv_plugin_num_midi_inputs(PluginInstance *p) = num_midi_inputs;
extern int lilv_plugin_num_midi_outputs(PluginInstance *p) = num_midi_outputs;
extern expr *lilv_plugin_midi_inputs(PluginInstance *p) = midi_inputs;
extern expr *lilv_plugin_midi_outputs(PluginInstance *p) = midi_outputs;
extern void lilv_plugin_set_block_size(PluginInstance *p, int block_size)
  = set_block_size;
extern void lilv_plugin_set_midi_buffer_size(PluginInstance *p,
					      int buffer_size)
  = set_midi_buffer_size;

/* lilv::port_info: Retrieve port information. For a given port number, this
   yields a tuple with the port symbol and name, type, flags and, in the case
   of a control or CV port, the minimum, maximum and default value of the
   port. The meaning of the fields is the same as with the lilv::info
   operation. */

extern expr *lilv_plugin_port_info(PluginInstance *p, int k) = port_info;

/* Get and set the control port values, given the port number. When setting a
   value, it is always clamped to the prescribed range (minimum and maximum
   port value, as given by lilv::port_info). */

extern double lilv_plugin_get_control(PluginInstance *p, int k) = get_control;
extern void lilv_plugin_set_control(PluginInstance *p, int k, double x)
  = set_control;
set_control p k x::int = set_control p k (double x);

/* Get and set MIDI data. These are transmitted using atom or event ports.
   The following functions are used to send MIDI input to the plugin's MIDI
   inputs before running the plugin, and retrieve its MIDI outputs
   afterwards. Typically these steps are repeated in a realtime loop which
   interprets incoming and outgoing control changes and MIDI events while
   processing and/or generating audio and CV data.

   NOTE: There's no essential difference between atom and event ports, both
   represent sequences of (timestamped) MIDI messages. Atom ports are the new,
   recommended representation. Event ports have been deprecated for a while,
   but for the time being they are still supported in this implementation for
   backward compatibility. Which of these types is actually used depends on
   the particular plugin, but the operation of the MIDI port from Pure is the
   same no matter which type of port is being used.

   Each MIDI atom or event port has a buffer holding a sequence of timestamped
   MIDI messages. The size of these buffers is always limited. It is usually
   set to 4096 bytes total capacity by default, but this can be adjusted with
   lilv:set_midi_buffer_size. The timestamps are offsets in terms of audio
   frames (sample numbers) which are relative to the beginning of the current
   block of audio samples. If desired (and supported by the plugin), they can
   be used to provide for sample-accurate timing of MIDI messages. (Our
   current implementation only provides integral frame numbers as timestamps,
   however. The subframe counts, which are also in the LV2 standard to give
   even greater accuracy, are not supported right now.)

   In Pure land, a MIDI sequence is denoted as a list of pairs consisting of a
   timestamp and an int vector holding the status byte and data bytes of the
   message. On input (lilv::set_midi), the timestamp can also be omitted if it
   is zero. This format is also compatible with the pure-midi module. E.g., a
   sequence of three note on messages and zero timestamps would look like
   this: [(0,{0x90,60,127}),(0,{0x90,64,127}),(0,{0x90,67,127})]. The same
   sequence might also be specified as [{0x90,60,127},{0x90,64,127},
   {0x90,67,127}] with lilv::set_midi, omitting the zero timestamps.

   Please note that the LV2 spec requires that only properly formatted MIDI
   messages are written to an input port (beginning with a valid status byte
   and followed by the appropriate number of data bytes). Moreover, the use of
   note on messages with a velocity of 0 to denote note offs is not mandated
   by the spec (you should use a proper note off message instead). These rules
   should be taken into account when delivering a message, since they are not
   enforced by the lilv::midi_set operation.

   Provided Operations: lilv::get_midi returns the MIDI messages available on
   the given MIDI port, as a list of pairs of ints (the timestamps) and Pure
   int vectors (the MIDI messages). Conversely, lilv::set_midi takes a list of
   timestamp (int) / MIDI message (int vector) pairs or just int vectors
   (assuming a zero timestamp in the latter case), and delivers them to the
   given MIDI port so that they can be read by the plugin next time lilv::run
   is executed. Note that lilv::set_midi will overwrite the current contents
   of the port buffer (not add to it), so the last call to lilv::set_midi on a
   given MIDI input port determines which messages are passed to the plugin
   when lilv::run is invoked. Moreover, the buffer contents of each MIDI input
   port is automatically reset after lilv::run has executed. Likewise, the
   buffer contents of each MIDI output port is reset before lilv::run
   executes, so that reading the port with lilv::get_midi after invoking
   lilv::run will retrieve the messages for the current block of samples only.

   Note that both lilv::get_midi and lilv::set_midi can be used with either
   input or output ports, so that it's always possible to use lilv::get_midi
   to read back MIDI data written with lilv::set_midi. But the port *must* be
   an atom or event port which is MIDI-capable (i.e., has bit 3 in the port
   flags set), otherwise these operations will fail. */

extern expr *lilv_plugin_get_midi(PluginInstance *p, int k) = get_midi;
extern expr *lilv_plugin_set_midi(PluginInstance *p, int k, expr *x) = set_midi;
